{"version":3,"file":"next-s3-upload.cjs.production.min.js","sources":["../src/utils/config.ts","../src/utils/client.ts","../src/utils/keys.ts","../src/pages/api/s3-upload.ts","../src/components/file-input.tsx","../src/hooks/use-uploader.ts","../src/hooks/use-upload-files.tsx","../src/hooks/use-s3-upload.tsx","../src/hooks/use-presigned-upload.ts","../src/utils/private-files.ts","../src/utils/image-data.ts"],"sourcesContent":["export type S3Config = {\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  bucket?: string;\n  region?: string;\n  endpoint?: string;\n  forcePathStyle?: boolean;\n};\n\nexport function getConfig(s3Config?: S3Config) {\n  return {\n    accessKeyId: s3Config?.accessKeyId ?? `${process.env.S3_UPLOAD_KEY}`,\n    secretAccessKey:\n      s3Config?.secretAccessKey ?? `${process.env.S3_UPLOAD_SECRET}`,\n    bucket: s3Config?.bucket ?? `${process.env.S3_UPLOAD_BUCKET}`,\n    region: s3Config?.region ?? `${process.env.S3_UPLOAD_REGION}`,\n    endpoint: s3Config?.endpoint,\n    forcePathStyle: s3Config?.forcePathStyle,\n  };\n}\n","import { S3Client } from '@aws-sdk/client-s3';\nimport { getConfig, S3Config } from './config';\n\nexport function getClient(s3Config?: S3Config) {\n  let config = getConfig(s3Config);\n\n  let client = new S3Client({\n    credentials: {\n      accessKeyId: config.accessKeyId,\n      secretAccessKey: config.secretAccessKey,\n    },\n    region: config.region,\n    ...(config.forcePathStyle ? { forcePathStyle: config.forcePathStyle } : {}),\n    ...(config.endpoint ? { endpoint: config.endpoint } : {}),\n  });\n\n  return client;\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const uuid = () => uuidv4();\n\nconst SAFE_CHARACTERS = /[^0-9a-zA-Z!_\\\\.\\\\*'\\\\(\\\\)\\\\\\-/]/g;\nexport const sanitizeKey = (value: string) =>\n  value.replace(SAFE_CHARACTERS, ' ').replace(/\\s+/g, '-');\n","import { NextApiRequest, NextApiResponse } from 'next';\nimport {\n  STSClient,\n  GetFederationTokenCommand,\n  STSClientConfig,\n} from '@aws-sdk/client-sts';\nimport { PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { getConfig, S3Config } from '../../utils/config';\nimport { getClient } from '../../utils/client';\nimport { sanitizeKey, uuid } from '../../utils/keys';\n\ntype NextRouteHandler = (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => Promise<void>;\n\ntype Configure = (options: Options) => Handler;\ntype Handler = NextRouteHandler & { configure: Configure };\n\ntype Options = S3Config & {\n  key?: (req: NextApiRequest, filename: string) => string | Promise<string>;\n};\n\nlet makeRouteHandler = (options: Options = {}): Handler => {\n  let route: NextRouteHandler = async function(req, res) {\n    let config = getConfig({\n      accessKeyId: options.accessKeyId,\n      secretAccessKey: options.secretAccessKey,\n      bucket: options.bucket,\n      region: options.region,\n      forcePathStyle: options.forcePathStyle,\n      endpoint: options.endpoint,\n    });\n\n    let missing = missingEnvs(config);\n    if (missing.length > 0) {\n      res\n        .status(500)\n        .json({ error: `Next S3 Upload: Missing ENVs ${missing.join(', ')}` });\n    } else {\n      let uploadType = req.body._nextS3?.strategy;\n      let filename = req.body.filename;\n\n      let key = options.key\n        ? await Promise.resolve(options.key(req, filename))\n        : `next-s3-uploads/${uuid()}/${sanitizeKey(filename)}`;\n      let { bucket, region, endpoint } = config;\n\n      if (uploadType === 'presigned') {\n        let filetype = req.body.filetype;\n        let client = getClient(config);\n        let params = {\n          Bucket: bucket,\n          Key: key,\n          ContentType: filetype,\n          CacheControl: 'max-age=630720000',\n        };\n\n        const url = await getSignedUrl(client, new PutObjectCommand(params), {\n          expiresIn: 60 * 60,\n        });\n\n        res.status(200).json({\n          key,\n          bucket,\n          region,\n          endpoint,\n          url,\n        });\n      } else {\n        let stsConfig: STSClientConfig = {\n          credentials: {\n            accessKeyId: config.accessKeyId,\n            secretAccessKey: config.secretAccessKey,\n          },\n          region,\n        };\n\n        let policy = {\n          Statement: [\n            {\n              Sid: 'Stmt1S3UploadAssets',\n              Effect: 'Allow',\n              Action: ['s3:PutObject'],\n              Resource: [`arn:aws:s3:::${bucket}/${key}`],\n            },\n          ],\n        };\n\n        let sts = new STSClient(stsConfig);\n\n        let command = new GetFederationTokenCommand({\n          Name: 'S3UploadWebToken',\n          Policy: JSON.stringify(policy),\n          DurationSeconds: 60 * 60, // 1 hour\n        });\n\n        let token = await sts.send(command);\n\n        res.status(200).json({\n          token,\n          key,\n          bucket,\n          region,\n        });\n      }\n    }\n  };\n\n  let configure = (options: Options) => makeRouteHandler(options);\n\n  return Object.assign(route, { configure });\n};\n\nlet missingEnvs = (config: Record<string, any>): string[] => {\n  let required = ['accessKeyId', 'secretAccessKey', 'bucket', 'region'];\n\n  return required.filter(key => !config[key] || config.key === '');\n};\n\nlet APIRoute = makeRouteHandler();\n\nexport { APIRoute };\n","import React, { ChangeEvent, InputHTMLAttributes } from 'react';\nimport { forwardRef } from 'react';\n\ntype FileInputProps = {\n  onChange: (\n    file: File | undefined,\n    event: ChangeEvent<HTMLInputElement>\n  ) => void;\n} & InputHTMLAttributes<HTMLInputElement>;\n\nexport const FileInput = forwardRef<HTMLInputElement, FileInputProps>(\n  ({ onChange = () => {}, ...restOfProps }, forwardedRef) => {\n    let handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n      let file = event.target?.files?.[0];\n      onChange(file, event);\n    };\n\n    return (\n      <input\n        onChange={handleChange}\n        {...restOfProps}\n        ref={forwardedRef}\n        type=\"file\"\n      />\n    );\n  }\n);\n","import { useUploadFiles } from './use-upload-files';\n\ntype UploadResult = {\n  url: string;\n  bucket: string;\n  key: string;\n};\n\ntype RequestOptions = {\n  url?: string;\n  body?: Record<string, any>;\n  headers?: HeadersInit;\n};\n\ntype UploadToS3Options = {\n  endpoint?: {\n    request: RequestOptions;\n  };\n};\n\n// Outdated options we no longer want support.\ntype OldOptions = {\n  endpoint: string;\n};\n\ntype Strategy = 'presigned' | 'aws-sdk';\n\nexport type Uploader<P = any> = (\n  file: File,\n  params: P,\n  eventHandlers: {\n    onProgress: (uploaded: number) => void;\n  }\n) => Promise<UploadResult>;\n\nexport const useUploader = (\n  strategy: Strategy,\n  uploader: Uploader,\n  oldOptions?: OldOptions\n) => {\n  let {\n    addFile,\n    updateFileProgress,\n    FileInput,\n    openFileDialog,\n    files,\n    resetFiles,\n  } = useUploadFiles();\n\n  let uploadToS3 = async (file: File, options: UploadToS3Options = {}) => {\n    // combine old options and new options. remove after 1.0\n    if (oldOptions?.endpoint) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          '[Next S3 Upload] The `endpoint` option has been replaced by `endpoint.request.url`. For more information see: https://next-s3-upload.codingvalue.com/changes/endpoint'\n        );\n      }\n\n      if (options.endpoint) {\n        options.endpoint.request.url = oldOptions.endpoint;\n      } else {\n        options.endpoint = {\n          request: {\n            url: oldOptions.endpoint,\n          },\n        };\n      }\n    }\n\n    let params = await getUploadParams(\n      strategy,\n      file,\n      options.endpoint?.request\n    );\n\n    if (params.error) {\n      console.error(params.error);\n      throw params.error;\n    }\n\n    addFile(file);\n\n    let result = await uploader(file, params, {\n      onProgress: uploaded => updateFileProgress(file, uploaded),\n    });\n\n    return result;\n  };\n\n  return {\n    FileInput,\n    openFileDialog,\n    uploadToS3,\n    files,\n    resetFiles,\n  };\n};\n\nlet getUploadParams = async (\n  strategy: Strategy,\n  file: File,\n  requestOptions?: RequestOptions\n) => {\n  let additionalBody = requestOptions?.body ?? {};\n  let additionalHeaders = requestOptions?.headers ?? {};\n  let apiRouteUrl = requestOptions?.url ?? '/api/s3-upload';\n\n  let body = {\n    filename: file.name,\n    filetype: file.type,\n    _nextS3: {\n      strategy,\n    },\n    ...additionalBody,\n  };\n\n  let headers = {\n    ...additionalHeaders,\n    'Content-Type': 'application/json',\n  };\n\n  let res = await fetch(apiRouteUrl, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body),\n  });\n\n  return await res.json();\n};\n","import React from 'react';\nimport { FileInput } from '../components/file-input';\nimport { useRef, useState } from 'react';\n\ntype TrackedFile = {\n  file: File;\n  progress: number;\n  uploaded: number;\n  size: number;\n};\n\nexport const useUploadFiles = () => {\n  let ref = useRef<HTMLInputElement>();\n  let [files, setFiles] = useState<TrackedFile[]>([]);\n\n  let openFileDialog = () => {\n    if (ref.current) {\n      ref.current.value = '';\n      ref.current?.click();\n    }\n  };\n\n  let resetFiles = () => {\n    setFiles([]);\n  };\n\n  let updateFileProgress = (file: File, uploaded: number) => {\n    setFiles(files =>\n      files.map(trackedFile =>\n        trackedFile.file === file\n          ? {\n              file,\n              uploaded,\n              size: file.size,\n              progress: file.size ? (uploaded / file.size) * 100 : 0,\n            }\n          : trackedFile\n      )\n    );\n  };\n\n  let addFile = (file: File) => {\n    setFiles(files => [\n      ...files,\n      { file, progress: 0, uploaded: 0, size: file.size },\n    ]);\n  };\n\n  return {\n    FileInput: (props: any) => (\n      <FileInput {...props} ref={ref} style={{ display: 'none' }} />\n    ),\n    openFileDialog,\n    files,\n    addFile,\n    updateFileProgress,\n    resetFiles,\n  };\n};\n","import {\n  CompleteMultipartUploadCommandOutput,\n  S3Client,\n} from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { Uploader, useUploader } from './use-uploader';\n\ntype Params = {\n  key: string;\n  bucket: string;\n  token: Record<string, any>;\n  region: string;\n};\n\nlet upload: Uploader<Params> = async (file, params, { onProgress }) => {\n  let { key, bucket, token, region } = params;\n\n  let client = new S3Client({\n    credentials: {\n      accessKeyId: token.Credentials.AccessKeyId,\n      secretAccessKey: token.Credentials.SecretAccessKey,\n      sessionToken: token.Credentials.SessionToken,\n    },\n    region: region,\n  });\n\n  let uploadParams = {\n    Bucket: bucket,\n    Key: key,\n    Body: file,\n    CacheControl: 'max-age=630720000, public',\n    ContentType: file.type,\n  };\n\n  // at some point make this configurable\n  // let uploadOptions = {\n  //   partSize: 100 * 1024 * 1024,\n  //   queueSize: 1,\n  // };\n\n  let s3Upload = new Upload({\n    client,\n    params: uploadParams,\n  });\n\n  s3Upload.on('httpUploadProgress', progress => {\n    let uploaded = progress.loaded ?? 0;\n    onProgress(uploaded);\n  });\n\n  let uploadResult = (await s3Upload.done()) as CompleteMultipartUploadCommandOutput;\n\n  let url =\n    uploadResult.Bucket && uploadResult.Key\n      ? `https://${uploadResult.Bucket}.s3.${region}.amazonaws.com/${uploadResult.Key}`\n      : '';\n\n  return {\n    url,\n    bucket: uploadResult.Bucket ?? '',\n    key: uploadResult.Key ?? '',\n  };\n};\n\nexport const useS3Upload = (options?: { endpoint: string }) => {\n  let hook = useUploader('aws-sdk', upload, options);\n  return hook;\n};\n","import { Uploader, useUploader } from './use-uploader';\n\nlet upload: Uploader = async (file, params, { onProgress }) => {\n  let { url, key, bucket, region, endpoint } = params;\n  let buffer = await file.arrayBuffer();\n\n  await new Promise<void>((resolve, reject) => {\n    let xhr = new XMLHttpRequest();\n\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      onProgress(event.loaded);\n    };\n\n    xhr.open('PUT', url, true);\n    xhr.setRequestHeader('Content-Type', file.type);\n    xhr.setRequestHeader('Cache-Control', 'max-age=630720000');\n\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve();\n        } else {\n          reject();\n        }\n      }\n    };\n\n    xhr.send(buffer);\n  });\n\n  let resultUrl = endpoint\n    ? `${endpoint}/${bucket}/${key}`\n    : `https://${bucket}.s3.${region}.amazonaws.com/${key}`;\n\n  return {\n    url: resultUrl,\n    bucket,\n    key,\n  };\n};\n\nexport const usePresignedUpload = () => {\n  let hook = useUploader('presigned', upload);\n  return hook;\n};\n","import { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getConfig, S3Config } from './config';\nimport { getClient } from './client';\n\nexport const generateTemporaryUrl = async (\n  key: string,\n  s3Config?: S3Config\n) => {\n  let config = getConfig(s3Config);\n  let client = getClient(s3Config);\n\n  let command = new GetObjectCommand({\n    Bucket: config.bucket,\n    Key: key,\n  });\n\n  let url = await getSignedUrl(client, command, { expiresIn: 3600 });\n\n  return url;\n};\n","interface ImageData {\n  height: number | undefined;\n  width: number | undefined;\n}\n\nexport const getImageData = (file: File | Blob): Promise<ImageData> => {\n  return new Promise(resolve => {\n    if (file.type.split('/')?.[0] === 'image') {\n      let img = new Image();\n      let objectUrl = URL.createObjectURL(file);\n      img.onload = (event: Event) => {\n        let image = event.target as HTMLImageElement;\n        resolve({ height: image.height, width: image.width });\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n    } else {\n      resolve({ height: undefined, width: undefined });\n    }\n  });\n};\n"],"names":["getConfig","s3Config","accessKeyId","process","env","S3_UPLOAD_KEY","secretAccessKey","S3_UPLOAD_SECRET","bucket","S3_UPLOAD_BUCKET","region","S3_UPLOAD_REGION","endpoint","forcePathStyle","getClient","config","S3Client","credentials","uuid","uuidv4","SAFE_CHARACTERS","sanitizeKey","value","replace","makeRouteHandler","options","Object","assign","req","res","missing","missingEnvs","length","_context","status","json","error","join","uploadType","body","_nextS3","_req$body$_nextS","strategy","filename","key","Promise","resolve","filetype","client","params","Bucket","Key","ContentType","CacheControl","getSignedUrl","PutObjectCommand","expiresIn","url","policy","Statement","Sid","Effect","Action","Resource","sts","STSClient","command","GetFederationTokenCommand","Name","Policy","JSON","stringify","DurationSeconds","send","token","configure","filter","APIRoute","FileInput","forwardRef","forwardedRef","onChange","restOfProps","React","event","file","target","_event$target","files","_event$target$files","ref","type","useUploader","uploader","oldOptions","setFiles","useRef","useState","props","style","display","openFileDialog","current","_ref$current","click","addFile","progress","uploaded","size","updateFileProgress","map","trackedFile","resetFiles","uploadToS3","request","getUploadParams","_options$endpoint","console","onProgress","requestOptions","additionalBody","additionalHeaders","headers","apiRouteUrl","name","Content-Type","_context2","fetch","method","upload","Credentials","AccessKeyId","SecretAccessKey","sessionToken","SessionToken","s3Upload","Upload","Body","on","loaded","done","uploadResult","arrayBuffer","buffer","reject","xhr","XMLHttpRequest","onprogress","open","setRequestHeader","onreadystatechange","readyState","generateTemporaryUrl","GetObjectCommand","split","_file$type$split","img","Image","objectUrl","URL","createObjectURL","onload","image","height","width","revokeObjectURL","src","undefined"],"mappings":"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"}